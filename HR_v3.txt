create database HumanResource
go
use HumanResource
go
CREATE SCHEMA HR
GO

CREATE TABLE HR.REGIONS 
    ( 
     REGION_ID FLOAT  NOT NULL , 
     REGION_NAME VARCHAR (25) 
    ) 
;

ALTER TABLE HR.REGIONS   ADD CONSTRAINT REG_ID_PK PRIMARY KEY ( REGION_ID ) ;


CREATE TABLE HR.COUNTRIES 
    ( 
     COUNTRY_ID CHAR (2)  NOT NULL , --!identity 
     COUNTRY_NAME VARCHAR (40) , 
     REGION_ID FLOAT ,
    ) 
;

ALTER TABLE HR.COUNTRIES  ADD CONSTRAINT COUNTRY_C_ID_PK PRIMARY KEY (COUNTRY_ID);

CREATE TABLE HR.DEPARTMENTS 
    ( 
     DEPARTMENT_ID SMALLINT  NOT NULL , --!identity 
     DEPARTMENT_NAME VARCHAR (30)  NOT NULL , 
     MANAGER_ID INT  , 
     LOCATION_ID SMALLINT --!identity 
    ) 
;


ALTER TABLE HR.DEPARTMENTS ADD CONSTRAINT DEPT_ID_PK PRIMARY KEY ( DEPARTMENT_ID ) ;


CREATE TABLE HR.EMPLOYEES 
    ( 
     EMPLOYEE_ID INT   NOT NULL , --!identity 
     FIRST_NAME VARCHAR (20) , --!identity 
     LAST_NAME VARCHAR (25)  NOT NULL , --!identity 
     EMAIL VARCHAR (25)  NOT NULL , 
     PHONE_NUMBER VARCHAR (20) , 
     HIRE_DATE DATETIME  NOT NULL , 
     JOB_ID VARCHAR (10)   NOT NULL , --!identity 
     SALARY DECIMAL (8,2) , 
     COMMISSION_PCT DECIMAL (2,2) , 
     MANAGER_ID INT , --!identity 
     DEPARTMENT_ID SMALLINT   --!identity 
    ) 
;

ALTER TABLE HR.EMPLOYEES 
    ADD CONSTRAINT EMP_SALARY_MIN 
    CHECK ( salary > 0) 
;


-----! creacion de indice
ALTER TABLE HR.EMPLOYEES 
    ADD CONSTRAINT EMP_EMP_ID_PK PRIMARY KEY ( EMPLOYEE_ID ) ;

ALTER TABLE HR.EMPLOYEES 
    ADD CONSTRAINT EMP_EMAIL_UK UNIQUE ( EMAIL ) ;


CREATE TABLE HR.JOBS 
    ( 
     JOB_ID VARCHAR (10)  NOT NULL , --!identity 
     JOB_TITLE VARCHAR (35)  NOT NULL , 
     MIN_SALARY INT  , 
     MAX_SALARY INT  
    ) 
;

ALTER TABLE HR.JOBS ADD CONSTRAINT JOB_ID_PK PRIMARY KEY ( JOB_ID ) ;


CREATE TABLE HR.JOB_HISTORY 
    ( 
     EMPLOYEE_ID INT   NOT NULL , --!identity 
     START_DATE DATETIME  NOT NULL , --!identity 
     END_DATE DATETIME  NOT NULL , 
     JOB_ID VARCHAR (10)  NOT NULL ,  --!identity 
     DEPARTMENT_ID SMALLINT  --!identity 
    ) 
;
ALTER TABLE HR.JOB_HISTORY  ADD CONSTRAINT JHIST_ID_DATE_PK PRIMARY KEY ( EMPLOYEE_ID, START_DATE ) ;

CREATE TABLE HR.LOCATIONS 
    ( 
     LOCATION_ID SMALLINT   NOT NULL , --!identity 
     STREET_ADDRESS VARCHAR (40) , 
     POSTAL_CODE VARCHAR (12) , 
     CITY VARCHAR (30)  NOT NULL , --!identity 
     STATE_PROVINCE VARCHAR (25) , --!identity 
     COUNTRY_ID CHAR (2) --!identity 
    ) 
;

ALTER TABLE HR.LOCATIONS ADD CONSTRAINT LOC_ID_PK PRIMARY KEY ( LOCATION_ID ) ;




--!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

ALTER TABLE HR.LOCATIONS  ADD CONSTRAINT LOC_C_ID_FK  FOREIGN KEY (COUNTRY_ID) 
REFERENCES HR.COUNTRIES (COUNTRY_ID)
ALTER TABLE HR.COUNTRIES  ADD CONSTRAINT COUNTR_REG_FK FOREIGN KEY (REGION_ID) 
REFERENCES HR.REGIONS (REGION_ID)

ALTER TABLE HR.DEPARTMENTS ADD CONSTRAINT DEPT_LOC_FK FOREIGN KEY ( LOCATION_ID ) 
REFERENCES HR.LOCATIONS (LOCATION_ID)

ALTER TABLE HR.DEPARTMENTS ADD CONSTRAINT DEPT_MGR_FK FOREIGN KEY ( MANAGER_ID ) 
REFERENCES HR.EMPLOYEES (EMPLOYEE_ID) --!revisa

ALTER TABLE HR.EMPLOYEES ADD CONSTRAINT EMP_DEPT_FK FOREIGN KEY ( DEPARTMENT_ID ) 
REFERENCES HR.DEPARTMENTS (DEPARTMENT_ID) 

ALTER TABLE HR.EMPLOYEES ADD CONSTRAINT EMP_JOB_FK FOREIGN KEY (JOB_ID ) 
REFERENCES HR.JOBS  (JOB_ID) 

ALTER TABLE HR.EMPLOYEES ADD CONSTRAINT EMP_MANAGER_FK FOREIGN KEY (MANAGER_ID ) 
REFERENCES HR.EMPLOYEES  (EMPLOYEE_ID) --!revisa

ALTER TABLE HR.JOB_HISTORY ADD CONSTRAINT JHIST_DEPT_FK FOREIGN KEY (DEPARTMENT_ID ) 
REFERENCES HR.DEPARTMENTS   (DEPARTMENT_ID) --

ALTER TABLE HR.JOB_HISTORY  ADD CONSTRAINT JHIST_EMP_FK FOREIGN KEY (EMPLOYEE_ID ) 
REFERENCES HR.EMPLOYEES    (EMPLOYEE_ID) --!revisa
ALTER TABLE HR.JOB_HISTORY  ADD CONSTRAINT JHIST_JOB_FK FOREIGN KEY (JOB_ID ) 
REFERENCES HR.JOBS   (JOB_ID) 

drop table  HR.COUNTRIES,HR.DEPARTMENTS, HR.EMPLOYEES, HR.JOB_HISTORY, HR.JOBS, HR.LOCATIONS, HR.REGIONS

--!!!!!

CREATE UNIQUE INDEX COUNTRY_C_ID_PKX ON HR.COUNTRIES 
    ( 
    COUNTRY_ID ASC 
    ) 
;
CREATE INDEX DEPT_LOCATION_IX ON HR.DEPARTMENTS 
    ( 
     LOCATION_ID ASC 
    ) 
;

CREATE UNIQUE INDEX DEPT_ID_PKX ON HR.DEPARTMENTS 
    ( 
     DEPARTMENT_ID ASC 
    ) 
;


--!part2

CREATE INDEX EMP_DEPARTMENT_IX ON HR.EMPLOYEES 
    ( 
     DEPARTMENT_ID ASC 
    ) 
;

CREATE INDEX EMP_JOB_IX ON HR.EMPLOYEES 
    ( 
     JOB_ID ASC 
    ) 
;

CREATE INDEX EMP_MANAGER_IX ON HR.EMPLOYEES 
    ( 
     MANAGER_ID ASC 
    ) 
;

CREATE INDEX EMP_NAME_IX ON HR.EMPLOYEES 
    ( 
     LAST_NAME ASC , 
     FIRST_NAME ASC 
    ) 
;

CREATE UNIQUE INDEX EMP_EMP_ID_PKX ON HR.EMPLOYEES 
    ( 
     EMPLOYEE_ID ASC 
    ) 
;


CREATE UNIQUE INDEX JOB_ID_PKX ON HR.JOBS 
    ( 
     JOB_ID ASC 
    ) 
;




CREATE INDEX JHIST_JOB_IX ON HR.JOB_HISTORY 
    ( 
     JOB_ID ASC 
    ) 
;

CREATE INDEX JHIST_EMP_IX ON HR.JOB_HISTORY 
    ( 
     EMPLOYEE_ID ASC 
    ) 
;

CREATE INDEX JHIST_DEPT_IX ON HR.JOB_HISTORY 
    ( 
     DEPARTMENT_ID ASC 
    ) 
;

CREATE UNIQUE INDEX JHIST_ID_DATE_PKX ON HR.JOB_HISTORY 
    ( 
     EMPLOYEE_ID ASC , 
     START_DATE ASC 
    ) 
;


--! parte 3


CREATE INDEX LOC_CITY_IX ON HR.LOCATIONS 
    ( 
     CITY ASC 
    ) 
;

CREATE INDEX LOC_STATE_PROV_IX ON HR.LOCATIONS 
    ( 
     STATE_PROVINCE ASC 
    ) 
;

CREATE INDEX LOC_COUNTRY_IX ON HR.LOCATIONS 
    ( 
     COUNTRY_ID ASC 
    ) 
;

CREATE UNIQUE INDEX LOC_ID_PKX ON HR.LOCATIONS 
    ( 
     LOCATION_ID ASC 
    ) 
;


CREATE UNIQUE INDEX REG_ID_PKX ON HR.REGIONS 
    ( 
     REGION_ID ASC 
    ) 
;


---! partes 4

CREATE OR REPLACE VIEW EMP_DETAILS_VIEW AS 
SELECT
  e.employee_id,
  e.job_id,
  e.manager_id,
  e.department_id,
  d.location_id,
  l.country_id,
  e.first_name,
  e.last_name,
  e.salary,
  e.commission_pct,
  d.department_name,
  j.job_title,
  l.city,
  l.state_province,
  c.country_name,
  r.region_name
FROM
  employees e,
  departments d,
  jobs j,
  locations l,
  countries c,
  regions r
WHERE e.department_id = d.department_id
  AND d.location_id = l.location_id
  AND l.country_id = c.country_id
  AND c.region_id = r.region_id
  AND j.job_id = e.job_id
WITH READ ONLY ;




CREATE SEQUENCE DEPARTMENTS_SEQ 
    INCREMENT BY 10 
    MAXVALUE 9990 
    MINVALUE 1 
    NOCACHE 
;


CREATE SEQUENCE EMPLOYEES_SEQ 
    INCREMENT BY 1 
    MAXVALUE 9999999999999999999999999999 
    MINVALUE 1 
    NOCACHE 
;


CREATE SEQUENCE LOCATIONS_SEQ 
    INCREMENT BY 100 
    MAXVALUE 9900 
    MINVALUE 1 
    NOCACHE 
;


CREATE OR REPLACE TRIGGER SECURE_EMPLOYEES  
    INSTEAD OF INSERT OR AS UPDATE OR DELETE ON EMPLOYEES 
    FOR EACH ROW 
BEGIN
  secure_dml;
END secure_employees; 
/



CREATE OR REPLACE TRIGGER UPDATE_JOB_HISTORY ON EMPLOYEES 
    AFTER UPDATE OF JOB_ID, DEPARTMENT_ID 
     AS 
BEGIN
  add_job_history(:old.employee_id, :old.hire_date, getdate(),
                  :old.job_id, :old.department_id);
END
END; 
GO




IF OBJECT_ID('add_job_history', 'P') IS NOT NULL
  DROP PROCEDURE add_job_history;
GO

CREATE PROCEDURE add_job_history
  (  @p_emp_id int          /* Use -meta option job_history.employee_id%type */
   , @p_start_date datetime      /* Use -meta option job_history.start_date%type */
   , @p_end_date datetime        /* Use -meta option job_history.end_date%type */
   , @p_job_id int          /* Use -meta option job_history.job_id%type */
   , @p_department_id int   /* Use -meta option job_history.department_id%type */
   )
AS
BEGIN
SET NOCOUNT ON;
  INSERT INTO job_history (employee_id, start_date, end_date,
                           job_id, department_id)
    VALUES(@p_emp_id, @p_start_date, @p_end_date, @p_job_id, @p_department_id);
END; add_job_history;
/


IF OBJECT_ID('secure_dml', 'P') IS NOT NULL
  DROP PROCEDURE secure_dml;
GO

CREATE PROCEDURE secure_dml
AS
BEGIN
SET NOCOUNT ON;
  IF TO_CHAR (GETDATE(), 'HH24:MI') NOT BETWEEN '08:00' AND '18:00'
        OR TO_CHAR (GETDATE(), 'DY') IN ('SAT', 'SUN') BEGIN
	RAISE_APPLICATION_ERROR (-20205,
		'You may only make changes during normal office hours');
  END 
END; secure_dml;


--ALTER TABLE EMPLOYEES 
   -- ADD CONSTRAINT EMP_EMP_ID_PK PRIMARY KEY ( EMPLOYEE_ID ) ;
	--ALTER TABLE EMPLOYEES 
    --ADD CONSTRAINT EMP_EMAIL_UK UNIQUE ( EMAIL ) ;

--ALTER TABLE JOBS 
   -- ADD CONSTRAINT JOB_ID_PK PRIMARY KEY ( JOB_ID ) ;



--ALTER TABLE JOB_HISTORY 
  --  ADD CONSTRAINT JHIST_DATE_CHECK 
   -- CHECK (end_date > start_date)
     --   INITIALLY IMMEDIATE 
     --   ENABLE 
      --  VALIDATE 
--;
--ALTER TABLE JOB_HISTORY 
  --  ADD CONSTRAINT JHIST_ID_DATE_PK PRIMARY KEY ( EMPLOYEE_ID, START_DATE ) ;
--!-----------------

----------------borrarrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr

--ALTER TABLE HR.EMPLOYEES 
 --   ADD CONSTRAINT EMP_SALARY_MIN 
  --  CHECK ( salary > 0) 
--;

--ALTER TABLE HR.EMPLOYEES 
   -- ADD CONSTRAINT EMP_EMP_ID_PK PRIMARY KEY ( EMPLOYEE_ID ) ;

--ALTER TABLE HR.EMPLOYEES 
   --- ADD CONSTRAINT EMP_EMAIL_UK UNIQUE ( EMAIL ) ;